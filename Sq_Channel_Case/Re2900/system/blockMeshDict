/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    (-0.1 -1 -1)
    (0.1 -1 -1)
    (-0.1 0 -1)
    (0.1 0 -1)
    (-0.1 1 -1)
    (0.1 1 -1)
    (-0.1 -1 0)
    (0.1 -1 0)
    (-0.1 0 0)
    (0.1 0 0)
    (-0.1 1 0)
    (0.1 1 0)
    (-0.1 -1 1)
    (0.1 -1 1)
    (-0.1 0 1)
    (0.1 0 1)
    (-0.1 1 1)
    (0.1 1 1)
);

blocks
(
    hex (0 1 3 2 6 7 9 8) (20 60 60) simpleGrading (1 20 20)
    hex (2 3 5 4 8 9 11 10) (20 60 60) simpleGrading (1 0.05 20)
    hex (6 7 9 8 12 13 15 14) (20 60 60) simpleGrading (1 20 0.05)
    hex (8 9 11 10 14 15 17 16) (20 60 60) simpleGrading (1 0.05 0.05)

);

edges
(
);

boundary
(
    bottomWall
    {
        type            wall;
        faces           
        (
            (0 1 7 6)
            (6 7 13 12)
        );

    }
    leftWall
    {
        type            wall;
        faces           
        (
            (0 2 3 1)
            (2 4 5 3)
        );
    }

    rightWall
    {
        type            wall;
        faces           
        (
            (12 13 15 14) 
            (14 15 17 16)
        );
    }

    topWall
    {
        type            wall;
        faces           
        (
            (4 10 11 5)
            (10 16 17 11)
        );
    }

    inout1_half0
    {
        type            cyclic;
        neighbourPatch  inout1_half1;
        faces           ((1 3 9 7));
    }
    inout1_half1
    {
        type            cyclic;
        neighbourPatch  inout1_half0;
        faces           ((0 6 8 2));
    }

    inout2_half0
    {
        type            cyclic;
        neighbourPatch  inout2_half1;
        faces           ((3 5 11 9));
    }
    inout2_half1
    {
        type            cyclic;
        neighbourPatch  inout2_half0;
        faces           ((2 8 10 4));
    }

    inout3_half0
    {
        type            cyclic;
        neighbourPatch  inout3_half1;
        faces           ((7 9 15 13));
    }

    inout3_half1
    {
        type            cyclic;
        neighbourPatch  inout3_half0;
        faces           ((8 6 12 14));
    }

    inout4_half0
    {
        type            cyclic;
        neighbourPatch  inout4_half1;
        faces           ((9 11 17 15));
    }

    inout4_half1
    {
        type            cyclic;
        neighbourPatch  inout4_half0;
        faces           ((8 14 16 10));
    }

);

mergePatchPairs
(
);

// ************************************************************************* //
